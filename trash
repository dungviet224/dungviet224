local Library = {}

-- Utility function to create UI elements
function Library:CreateElement(type, properties)
    local element = Instance.new(type)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

-- Create a window (main container)
function Library:CreateWindow(name)
    local window = self:CreateElement("ScreenGui", {
        Name = name,
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })

    local mainFrame = self:CreateElement("Frame", {
        Name = "MainFrame",
        Parent = window,
        Size = UDim2.new(0, 400, 0, 300),
        Position = UDim2.new(0.5, -200, 0.5, -150),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        ClipsDescendants = true
    })

    local title = self:CreateElement("TextLabel", {
        Name = "Title",
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        Text = name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        Font = Enum.Font.SourceSansBold
    })

    local tabContainer = self:CreateElement("Frame", {
        Name = "TabContainer",
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    })

    local contentContainer = self:CreateElement("Frame", {
        Name = "ContentContainer",
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 1, -60),
        Position = UDim2.new(0, 0, 0, 60),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    })

    return {
        Window = window,
        MainFrame = mainFrame,
        TabContainer = tabContainer,
        ContentContainer = contentContainer
    }
end

-- Create a horizontal tab
function Library:CreateTab(window, name)
    local tabButton = self:CreateElement("TextButton", {
        Name = name,
        Parent = window.TabContainer,
        Size = UDim2.new(0.2, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60),
        Text = name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSans
    })

    local tabContent = self:CreateElement("Frame", {
        Name = name .. "Content",
        Parent = window.ContentContainer,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        Visible = false
    })

    tabButton.MouseButton1Click:Connect(function()
        for _, child in ipairs(window.ContentContainer:GetChildren()) do
            child.Visible = false
        end
        tabContent.Visible = true
    end)

    return tabContent
end

-- Create a button with auto-animation
function Library:CreateButton(parent, name, callback)
    local button = self:CreateElement("TextButton", {
        Name = name,
        Parent = parent,
        Size = UDim2.new(0.8, 0, 0, 30),
        Position = UDim2.new(0.1, 0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(70, 70, 70),
        Text = name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSans
    })

    button.MouseButton1Click:Connect(function()
        self:Animate(button, "BackgroundColor3", Color3.fromRGB(100, 100, 100), 0.2, function()
            self:Animate(button, "BackgroundColor3", Color3.fromRGB(70, 70, 70), 0.2)
        end)
        callback()
    end)

    return button
end

-- Create a slider with auto-animation
function Library:CreateSlider(parent, name, min, max, callback)
    local slider = self:CreateElement("Frame", {
        Name = name,
        Parent = parent,
        Size = UDim2.new(0.8, 0, 0, 30),
        Position = UDim2.new(0.1, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    })

    local sliderFill = self:CreateElement("Frame", {
        Name = "SliderFill",
        Parent = slider,
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    })

    local sliderText = self:CreateElement("TextLabel", {
        Name = "SliderText",
        Parent = slider,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = name .. ": " .. min,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSans
    })

    local isDragging = false
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
        end
    end)

    slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local x = math.clamp(input.Position.X - slider.AbsolutePosition.X, 0, slider.AbsoluteSize.X)
            local value = math.floor(((x / slider.AbsoluteSize.X) * (max - min)) + min)
            self:Animate(sliderFill, "Size", UDim2.new(x / slider.AbsoluteSize.X, 0, 1, 0), 0.1)
            sliderText.Text = name .. ": " .. value
            callback(value)
        end
    end)

    return slider
end

-- Create a toggle with auto-animation
function Library:CreateToggle(parent, name, callback)
    local toggle = self:CreateElement("TextButton", {
        Name = name,
        Parent = parent,
        Size = UDim2.new(0.8, 0, 0, 30),
        Position = UDim2.new(0.1, 0, 0, 80),
        BackgroundColor3 = Color3.fromRGB(70, 70, 70),
        Text = name .. ": Off",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSans
    })

    local toggled = false
    toggle.MouseButton1Click:Connect(function()
        toggled = not toggled
        self:Animate(toggle, "BackgroundColor3", toggled and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(70, 70, 70), 0.2)
        toggle.Text = name .. ": " .. (toggled and "On" or "Off")
        callback(toggled)
    end)

    return toggle
end

-- Smooth animation function
function Library:Animate(element, property, targetValue, duration, callback)
    local startValue = element[property]
    local step = (targetValue - startValue) / (duration * 60)

    for i = 1, duration * 60 do
        element[property] = element[property] + step
        wait(1 / 60)
    end

    if callback then
        callback()
    end
end

return Library
